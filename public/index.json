[
  {
    "content": "Installing UBUNTU 20.1 in Gen 1 Laptops Requirements: -\nUBUNTU 20.1 image on USB Booting UBUNTU 20.1 on Gen1 Laptop: -\nStep 1: -\nInsert USB into Gen 1 Laptops after installing Windows 10 Post inserting the USB keep on pressing the F2 button until the below screen appears. Select the Boot Sequence option from the settings. Step2:-\nClick on Add Boot Option as shown below in figure Step 3: -\npost click on the boot option the below screen will appear. In the window in boot option name enter the name as “GRUB”. Step 4:-\nNow click on 3 dots beside the filename the below window will appear. Now press on the “EFI” option in Directories. Step 5:-\nPost selection of EFI in Directories the below screen will appear Here there will be some of the files under the ‘FILES’ Section. Select the ‘GRUBX64 EFI’ and press ok. Make sure the path is present in selection as ‘\\EFI\\BOOT\\GRUBX64.EFI’ Step 6:-\nNow in the Boot Sequence you will be seeing an option called ‘GRUB’. Make sure that ‘GRUB’ is checked and click on ‘APPLY’ Booting Ubuntu 20.1 onto the Laptop :\nInsert the Ubuntu 20.1 image USB into the laptop and boot the laptop.\nWhile booting up the Laptop press F12 continuously until the boot menu appears.\nFrom the UEFI boot menu select the GRUB name.\nUbuntu installation begins as shown below\nSelect the install Ubuntu option from the above menu.\nSelect the Language, which is English, and click on continue.\nSelect the Normal installation, Download updates, and Install third-party software and graphic drivers as shown below. And click on continue.\nSelect the Installation along with Windows as our goal is to create a dual boot OS. and click on install on\nSelect the time zone and create the user as shown below:\nOnce the installation is complete reboot the laptop to see the below Boot menu ",
    "description": "",
    "tags": null,
    "title": "Alternate Installation of UBUNTU 20.1 in Gen 1 laptops",
    "uri": "/operating-systems/dual-booting/alternate-installation-of-ubuntu-20.1/alternate-installation-of-ubuntu-20-in-gen-1-laptops/index.html"
  },
  {
    "content": "\rSai Kalyan Maram\rMS in Information Technology\rLinkedIn\nSai Saketh Gooty Kasi\rMS in Information Technology\rLinkedIn\nJayanth Chitturi\rMS in Information Technology\rLinkedIn\nParitosh Vatturi\rMS in Cyber Security\rLinkedIn\nPunnulatha Rout\rMS in Information Technology\rLinkedIn\nRashmi MS in Information Technology\rLinkedIn\n",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Spring 2024",
    "uri": "/classroom-assistants/spring-2024/index.html"
  },
  {
    "content": "Creating partition in windows In your Windows go to Disk Management\nRight click on OS (C:) and choose Shrink Volume.\nEnter the amount of space to shrink in MB. Click Shrink.\n",
    "description": "",
    "tags": null,
    "title": "Create partition in windows",
    "uri": "/operating-systems/windows/windows-partition/windows-partition/index.html"
  },
  {
    "content": "\rAlternate Installation of UBUNTU 20.1 in Gen 1 laptops\rDual Boot System Configuration\r",
    "description": "",
    "tags": null,
    "title": "Dual Booting",
    "uri": "/operating-systems/dual-booting/index.html"
  },
  {
    "content": "Student’s guide to loan an equipment COMP Department provides laptops, mobile phones and other devices like Raspberry pi, mouse, etc to the students of UNH for their academic purposes.\nTo loan any kind of equipment, please follow the below procedure:\nEmail one of the tech consultants of the COMP department requesting for loaning the equipment.\nTech consultant will get back with the availability of the equipment.\nIf the equipment is ready to loan, make an appointment with tech consultant.\nGo to campus and loan the equipment. Please make sure that you have valid wildcat pass to enter the building.\n**Note :**You need your UNH ID to loan the equipment. You might be asked to fill in a loan form for borrowing the equipment.\nMake sure to return the equipment by the end of the requested date/ by the end of the semester. Please see the covid-return policy to return the loaned equipment.\n",
    "description": "",
    "tags": null,
    "title": "Student's guide to loan an equipment",
    "uri": "/loan-services/students-guide/index.html"
  },
  {
    "content": "\rVyshnavi Mulakalapalli\rMS in Information Technology\rLinkedIn\nLakshmi Prasanna Malempati\rMS in Information Technology\rLinkedIn\nPrudhvi Krishna Gangavarapu\rMS in Information Technology\rLinkedIn\nGeethanjali Allam MS in Information Technology\rLinkedIn\nAnanya Bojja MS in Information Technology\rLinkedIn\nShivani Ale MS in Information Technology\rLinkedIn\nShiva Kumar Malyala MS in Information Technology\rLinkedIn\nHemasri Muddam MS in Information Technology\rLinkedIn\n",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Fall 2023",
    "uri": "/classroom-assistants/fall-2023/index.html"
  },
  {
    "content": " Select Something else in installation dialog\nYou will see your disk as /dev/sda or /dev/mapper/pdc_* Click “New Partition Table…” You will see that you have free space on your disk now: (Recommended) Create partition for swap. Swap is the partition for keeping unneeded memory pages, like Windows swap. Also it can be used for hibernation.\nSelect free space and click + Set parameters like on the picture below: Notice that you should set swap size more than you have physical memory in order to use hibernation. Also, you can place it in the end of disk, but thus it will be slow.\nCreate partition for / (root fs). This is the filesystem that contains your kernel, boot files, system files, command-line utilities, libraries, system-wide configuration files and logs.\nSelect free space and click + Set parameters like on the picture below: 10 – 20 GiB should be enough\nCreate partition for /home. This is the filesystem for your user’s files: documents, images, music and videos. It’s much more like Users folder in Windows.\nYou can do this just like in step 4 and even choose other fs type (though I recommend use ext4 instead of reiserfs. Simply, the first is much more flexible and the second is quicker)\n(Optional) Create separate partitions for /boot, /tmp and /var. Set their size according to your needs:\n/boot should be 100 – 500 MiB /var and /tmp should be \u003e 5 GiB If you doubt about which device for boot loader installation to choose, leave it default. It would be set by installer. But sometimes it does mistakes. Let me guide you how to deal with it:\nIf you use only one hard disk, select or leave /dev/sda intact. If you use more than one hard disk with no RAID, select the one from which your system does boot. You can also select other disk and set BIOS to boot from it. If you have RAID from which your system starts, it will be /dev/mapper/... Be sure that you select entire disk, not a single partition! After all, you should see your disk like this:\nYou can now click Install Now and proceed to the installation.\n",
    "description": "",
    "tags": null,
    "title": "Creating partition on ubuntu during installation",
    "uri": "/operating-systems/ubuntu/ubuntu-partition/ubuntu-partition/index.html"
  },
  {
    "content": "Dual Booting a Laptop with Windows 10 and Ubuntu\nLast updated on: February 23, 2024\nRequirements:\nWindows 10 image on USB Ubuntu 20.1 image on USB Booting Windows 10 onto laptop\nInsert the Windows 10 image on USB on to the laptop.\nTurn on the laptop and press the F12 key repeatedly until the boot menu appears.\nSelect from the UeFi Boot menu which says uefi USB name. Windows installation appears as shown below.\nClick on next.\nClick on Install.\nEnter the activation key if provided else or click on activate later.\nWe should select the partition on which the Windows 10 needs to be installed. By default you can select the largest partition as Windows 10 requires a large amount of memory.\nInstallation begins and we can see the progress as shown below\nOnce the installation is completed create the users if needed, and reboot the laptop and login using the created user.\nOnce we login into Windows 10, go to the disk management and create a partition for Ubuntu.\nRemember this new partition as we will be using this partition to install the Ubuntu OS.\nBooting Ubuntu 20.1 onto the Laptop\nInsert the Ubuntu 20.1 image USB into the laptop and boot the laptop.\nWhile booting up the Laptop press F12 continuously until the boot menu appears.\nFrom the Ueif boot menu select the USB name.\nUbuntu installation begins as shown below\nSelect install Ubuntu option from the above menu.\nSelect the Language, which is English and click on continue.\nSelect the Normal installation, Download updates and Install third party softwares and graphic drivers as shown below. And click on continue.\nSelect the Installation along Windows as our goal is to create a dual boot OS. and click on install on\nSelect the time zone and create the user as shown below:\nOnce the installation is complete reboot the laptop to see the below Boot menu\n",
    "description": "",
    "tags": null,
    "title": "Dual Boot System Configuration",
    "uri": "/operating-systems/dual-booting/dual-boot-system-configuration/dual-boot-system-configuration/index.html"
  },
  {
    "content": "Loaned equipment return policy These requirements pertain to students who have chosen remote learning and do not come to campus:\nThe student who wants to pick up/return AES loaned equipment needs to get their COVID self-test kits. They would need to swab and drop off in the outside receptacle at least 5 days prior to when they plan to come into the building. ​OR The student who wants to pick up/return AES loaned equipment needs to meet one of the AES tech consultants outside of the building for the exchange. Please email any one of the tech consultants for an appointment. Note​: Loaning equipment is only for students who live locally. If a student has already loaned equipment and plans to travel internationally or to other states outside New England, they need to return the equipment.\n",
    "description": "",
    "tags": null,
    "title": "Loaned equipment return policy",
    "uri": "/loan-services/covid-return-policy/index.html"
  },
  {
    "content": "\rCreating partition on ubuntu during installation\rUbuntu Installation Guide\r",
    "description": "",
    "tags": null,
    "title": "Ubuntu",
    "uri": "/operating-systems/ubuntu/index.html"
  },
  {
    "content": " A minimum of 8GB storage USB drive.\nDownload an LTS (long term support) version of Ubuntu file from this link.\nNote: 16.04 or above is recommended as these are the most used versions\nDownload and install Rufus from link\nFollow the instructions at link to create a bootable USB with Ubuntu\nImportant: Print this document before proceeding in case you are working on the same machine you are trying to dual boot.\nGo to Settings and select Update \u0026 Security\nClick Recovery menu. Under Advanced start-up, click Restart Now\nSelect Troubleshoot.\nChoose Advanced Options.\nAdvanced Options\nSelect UEFI Firmware Settings. Then click Restart to restart the system and enter UEFI (BIOS). Note: You need to keep the USB drive with Ubuntu inserted while rebooting.\nIf you don't have UEFI Firmware Settings option, you can access boot menu in a different way. Reboot your computer, when it is starting up, press one of several keyboard keys: Esc, F2, F10 or F12, depending on the manufacturer of the computer or motherboard. The specific key to press is usually specified on the computer's startup screen.\nIn UEFI boot menu select UEFI: INT13(,0x81).\nChoose Try Ubuntu without installing option.\nLaunch Install Ubuntu from your desktop.\nSelect check box Install third party softwares while istalling the ubuntu.\nFollow the Preparing to Install Ubuntu steps. You will be asked to choose language, time zone, user name, etc.\nChoose Install Ubuntu alongside Windows Boot Manager to install Ubuntu in dual boot with Windows or choose Erase disk and install Ubuntu if you don't need Windows anymore.\nImportant : If you don't have Install Ubuntu alongside Windows Boot Manager option, but there is enough space for Ubuntu installation, you will need to create a partition. You can do this in the installation dialog or quit installation, go back to Windows and create a partition there. Follow these links How to Create a Partition in Ubuntu During Installation and How to Create a Partition in Windows to find the detailed instructions.\nRestart the computer\n",
    "description": "",
    "tags": null,
    "title": "Ubuntu Installation Guide",
    "uri": "/operating-systems/ubuntu/ubuntu-installation-guide/ubuntu-installation-guide/index.html"
  },
  {
    "content": "\rBryan Robbins\rBA in Computer Science\rLinkedIn\nVyshnavi Mulakalapalli\rMS in Information Technology\rLinkedIn\nLakshmi Prasanna Malempati\rMS in Information Technology\rLinkedIn\nPrudhvi Krishna Gangavarapu\rMS in Information Technology\rLinkedIn\nMariah Beaudoin BA in Computer Science\rLinkedIn\nGeethanjali Allam MS in Information Technology\rLinkedIn\nMason Armand BA in Computer Science\r",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Spring 2023",
    "uri": "/classroom-assistants/spring-2023/index.html"
  },
  {
    "content": "\rCreate partition in windows\r",
    "description": "",
    "tags": null,
    "title": "Windows",
    "uri": "/operating-systems/windows/index.html"
  },
  {
    "content": "\rBryan Robbins\rBA in Computer Science\rLinkedIn\nMariah Beaudoin BA in Computer Science\rLinkedIn\nRhea Hernandez\rBA in Biotechnology\rLinkedIn\n",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Spring 2022",
    "uri": "/classroom-assistants/spring-2022/index.html"
  },
  {
    "content": "Installing WSL Step 1: open an administrator command prompt in the windows search bar search for “cmd”\nthe search bar can be accessed by clicking in the bottom left of your screen or by pressing the windows key on your keyboard Hover over “command prompt” and Click “Run as administrator” step 2: Installing WSL Run the command “WSL.exe –install” Step 3: Restart your laptop after installation completes After you restart, you should see this windows pop open, wait for it to completes Installation Step 4: Confirm installation After installation is complete ensure that wsl properly installed by searching for “ubuntu” and checking that it appears. ",
    "description": "",
    "tags": null,
    "title": "Windows Linux Subsystem",
    "uri": "/operating-systems/windows-linux-subsystems/windows-linux-subsystem/index.html"
  },
  {
    "content": "\rSameera Kalgudi\rMS in Information Technology\rTechnology Fanatic LinkedIn\nKasi V Poppoppu\rMS in Cyber Security Engineering\rHacker LinkedIn\nMuzaffar Ali M\rMS in Information Technology\rData Analyst LinkedIn\nSnehitha Mamidi\rMS in Information Technology\rTech LinkedIn\n",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Spring 2021",
    "uri": "/classroom-assistants/spring-2021/index.html"
  },
  {
    "content": "\rRohit Kumar Veerabomma\rMS in Information Technology\rLinkedIn\nBryan Robbins\rBA in Computer Science\rTech Enthusiast LinkedIn\n",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Summer 2021",
    "uri": "/classroom-assistants/summer-2021/index.html"
  },
  {
    "content": "\rRohit Kumar Veerabomma\rMS in Information Technology\rLinkedIn\nBryan Robbins\rBA in Computer Science\rTech Enthusiast LinkedIn\nCarlo Jason Capuz\rMS in Information Technology\rLinkedIn\nRhea Hernandez\rBA in Biotechnology\rLinkedIn\nMariah Beaudoin BA in Computer Science\rLinkedIn\n",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants - Fall 2021",
    "uri": "/classroom-assistants/fall-2021/index.html"
  },
  {
    "content": "Overview You will find here information about academic honesty guidelines in programming subjects. The goal is to help you understand when you can reuse code and how to collaborate with others on programming homework and projects.\nWhat are example of academic dishonesty in programming assignments?\nIn individual programming assignments and projects, you need to develop your code on your own. Examples of academic dishonesty include the following:\nHaving someone write the code for you. Copying or downloading someone else’s code. Having someone walk you through their solution in detail and explain how to code it. Having someone else perform significant debugging of your code. Referring to solutions from previous semesters unless permitted by the instructor. Allowing others to copy or access your code. You shall not ask anyone to give you a copy of their code or, give your code to another student who asks you for it. You shall not discuss the detailed algorithmic strategies that you and your collaborators end up turning in essentially the same code. Discuss at very high-level approaches together, but work on the coding on your own.\nWhat code can I reuse?\nHowever, you don’t need to always write your code from scratch. The code you may reuse typically are:\nAny code you develop with the instructor, TAs, or class tutors. Code from the class slides and the class coding examples. Materials from the internet should only for educational purposes. If you write some code after you look at some code examples online, you need to include a proper acknowledgment to indicate the source. You may share additional test cases and expected results of test cases. Note that you should not share the solution code or experiment code. How to collaborate with my classmates?\nYou are encouraged to study together, to discuss at a very high-level method for solving the assignments, to help each other in using the software, and to discuss methods for debugging code. Examples of allowable collaboration include discussions and debate of general concepts and solution strategies and help with certain syntax errors.\nYou are also allowed to post short segments of code (10 lines or less) of code that are giving you errors to the class public discussion board to get help on fixing the syntax error. You should not look at someone else code (current students, past students, and code from the web) or discuss the code in at such a detailed level that solutions turn out essentially the same.\n",
    "description": "",
    "tags": null,
    "title": "Academic Honesty in Computing",
    "uri": "/academic-honesty-in-computing/index.html"
  },
  {
    "content": "About C++ is a middle-level language rendering it the advantage of programming low-level (drivers, kernels) and even higher-level applications (games, GUI, desktop apps etc.). The basic syntax and code structure of both C and C++ are the same.\nSome of the features \u0026 key-points to note about the programming language are as follows:\nSimple: It is a simple language in the sense that programs can be broken down into logical units and parts, has a rich libray support and a variety of data-types. Machine Independent but Platform Dependent: A C++ executable is not platform-independent (compiled programs on Linux won’t run on Windows), however they are machine independent. Mid-level language: It is a mid-level language as we can do both systems-programming (drivers, kernels, networking etc.) and build large-scale user applications (Media Players, Photoshop, Game Engines etc.) Rich library support: Has a rich library support (Both standard ~ built-in data structures, algorithms etc.) as well 3rd party libraries (e.g. Boost libraries) for fast and rapid development. Speed of execution: C++ programs excel in execution speed. Since, it is a compiled language, and also hugely procedural. Newer languages have extra in-built default features such as grabage-collection, dynamic typing etc. which slow the execution of the program overall. Since there is no additional processing overhead like this in C++, it is blazing fast. Pointer and direct Memory-Access: C++ provides pointer support which aids users to directly manipulate storage address. This helps in doing low-level programming (where one might need to have explicit control on the storage of variables). Object-Oriented: One of the strongest points of the language which sets it apart from C. Object-Oriented support helps C++ to make maintainable and extensible programs. i.e. Large-scale applications ca be built. Procedural code becomes difficult to maintain as code-size grows. Compiled Language: C++ is a compiled language, contributing to its speed. Setting up C++ Development Environment: Click here Data Types Data types in C++ is mainly divided into three types:\nPrimitive Data Types: These data types are built-in or predefined data types and can be used directly by the user to declare variables. example: int, char , float, bool etc. Primitive data types available in C++ are: Integer: Keyword used for integer data types is int. Integers typically requires 4 bytes of memory space and ranges from -2147483648 to 2147483647. Character: Character data type is used for storing characters. Keyword used for character data type is char. Characters typically requires 1 byte of memory space and ranges from -128 to 127 or 0 to 255. Boolean: Boolean data type is used for storing boolean or logical values. A boolean variable can store either true or false. Keyword used for boolean data type is bool. Floating Point: Floating Point data type is used for storing single precision floating point values or decimal values. Keyword used for floating point data type is float. Float variables typically requires 4 byte of memory space. Double Floating Point: Double Floating Point data type is used for storing double precision floating point values or decimal values. Keyword used for double floating point data type is double. Double variables typically requires 8 byte of memory space. void: Void means without any value. void datatype represents a valueless entity. Void data type is used for those function which does not returns a value. Wide Character: Wide character data type is also a character data type but this data type has size greater than the normal 8-bit datatype. Represented by wchar_t. It is generally 2 or 4 bytes long. Derived Data Types: The data-types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types. These can be of four types namely: Function: A function is a block of code or program-segment that is defined to perform a specific well-defined task. A function is generally defined to save the user from writing the same lines of code again and again for the same input. All the lines of code are put together inside a single function and this can be called anywhere required. main() is a default function that is defined in every program of C++. Array: An array is a collection of items stored at continuous memory locations. The idea of array is to represent many instances in one variable. Pointer: Pointers are symbolic representation of addresses. They enable programs to simulate call-by-reference as well as to create and manipulate dynamic data structures. Reference: When a variable is declared as reference, it becomes an alternative name for an existing variable. A variable can be declared as reference by putting ‘\u0026’ in the declaration. Abstract or User-Defined Data Types: These data types are defined by user itself. Like, defining a class in C++ or a structure. C++ provides the following user-defined datatypes: Class: The building block of C++ that leads to Object-Oriented programming is a Class. It is a user-defined data type, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object. Structure: A structure is a user defined data type in C/C++. A structure creates a data type that can be used to group items of possibly different types into a single type. Union: Like Structures, union is a user defined data type. In union, all members share the same memory location. For example in the following C program, both x and y share the same location. If we change x, we can see the changes being reflected in y. Enumeration: Enumeration (or enum) is a user defined data type in C. It is mainly used to assign names to integral constants, the names make a program easy to read and maintain. Typedef defined DataType: C++ allows you to define explicitly new data type names by using the keyword typedef. Using typedef does not actually create a new data class, rather it defines a name for an existing type. This can increase the portability(the ability of a program to be used across different types of machines; i.e., mini, mainframe, micro, etc; without much changes into the code)of a program as only the typedef statements would have to be changed. Using typedef one can also aid in self-documenting code by allowing descriptive names for the standard data types. Functions: A function is a set of statements that take inputs, do some specific computation and produces output. The idea is to put some commonly or repeatedly done task together and make a function so that instead of writing the same code again and again for different inputs, we can call the function. A function declaration tells the compiler about the number of parameters function takes, data-types of parameters and return type of function. Putting parameter names in function declaration is optional in the function declaration, but it is necessary to put them in the definition. Below are an example of function declarations. (parameter names are not there in below declarations)\n// A function that takes two integers as parameters // and returns an integer int max(int, int); // A function that takes a int pointer and an int variable as parameters // and returns an pointer of type int int *swap(int*,int); // A function that takes a charas parameters // and returns an reference variable char *call(char b); // A function that takes a char and an int as parameters // and returns an integer int fun(char, int); Arrays An array in C or C++ is a collection of items stored at contiguous memory locations and elements can be accessed randomly using indices of an array. They are used to store similar type of elements as in the data type must be the same for all elements. They can be used to store collection of primitive data types such as int, float, double, char, etc of any particular type.\nint arr1[10]; // With recent C/C++ versions, we can also // declare an array of user specified size int n = 10; int arr2[n]; // Array declaration by initializing elements int arr[] = { 10, 20, 30, 40 } // Compiler creates an array of size 4. // above is same as \"int arr[4] = {10, 20, 30, 40}\" // Array declaration by specifying size and initializing // elements int arr[6] = { 10, 20, 30, 40 } // Compiler creates an array of size 6, initializes first // 4 elements as specified by user and rest two elements as 0. // above is same as \"int arr[] = {10, 20, 30, 40, 0, 0}\" Strings Strings in C++ are used to store text or sequence of characters. In C++ strings can be stored in one of the two following ways:\nC style string: In C, strings are defined as an array of characters. The difference between a character array and a string is the string is terminated with a special character ‘\\0’. In C, the string is actually represented as an array of characters terminated by a null string. Therefore the size of the character array is always one more than that of the number of characters in the actual string. This thing continues to be supported in C++ too. The C++ compiler automatically sets “\\0” at the end of the string, during initialization of the array. char str[] = \"Geeks\";\rchar str[6] = \"Geeks\";\rchar str[] = {'G', 'e', 'e', 'k', 's', '\\0'};\rchar str[6] = {'G', 'e', 'e', 'k', 's', '\\0'}; String class: In C++, one can directly store the collection of characters or text in a string variable, surrounded by double-quotes. C++ provides string class, which supports various operations like copying strings, concatenating strings etc. string str1 = \"Geeks\";\rstring str2 = \"Welcome to GeeksforGeeks!\";Pointers Pointers are symbolic representation of addresses. They enable programs to simulate call-by-reference as well as to create and manipulate dynamic data structures. It’s general declaration in C/C++ has the format:\ndatatype *var_name; int *ptr; //ptr can point to an address which holds int dataLoops While loop A while loop statement repeatedly executes a target statement as long as a given condition is true.\nwhile(condition) {\rstatement(s);\r}Here, statement(s) may be a single statement or a block of statements. The condition may be any expression, and true is any non-zero value. The loop iterates while the condition is true.\nFor loop A for loop is a repetition control structure that allows you to efficiently write a loop that needs to execute a specific number of times.\nfor ( init; condition; increment ) {\rstatement(s);\r}Here is the flow of control in a for loop −\nThe init step is executed first, and only once. This step allows you to declare and initialize any loop control variables. You are not required to put a statement here, as long as a semicolon appears.\nNext, the condition is evaluated. If it is true, the body of the loop is executed. If it is false, the body of the loop does not execute and flow of control jumps to the next statement just after the for loop.\nAfter the body of the for loop executes, the flow of control jumps back up to the increment statement. This statement can be left blank, as long as a semicolon appears after the condition.\nThe condition is now evaluated again. If it is true, the loop executes and the process repeats itself (body of loop, then increment step, and then again condition). After the condition becomes false, the for loop terminates.\nDo…While loop Unlike for and while loops, which test the loop condition at the top of the loop, the do…while loop checks its condition at the bottom of the loop. A do…while loop is similar to a while loop, except that a do…while loop is guaranteed to execute at least one time.\ndo {\rstatement(s);\r} while( condition );Notice that the conditional expression appears at the end of the loop, so the statement(s) in the loop execute once before the condition is tested. If the condition is true, the flow of control jumps back up to do, and the statement(s) in the loop execute again. This process repeats until the given condition becomes false.\nNested Loops: A loop can be nested inside of another loop. C++ allows at least 256 levels of nesting. The syntax for a nested for loop statement in C++ is as follows\nfor ( init; condition; increment ) {\rfor ( init; condition; increment ) {\rstatement(s);\r}\rstatement(s); // you can put more statements.\r}The syntax for a nested while loop statement in C++ is as follows\nwhile(condition) {\rwhile(condition) {\rstatement(s);\r}\rstatement(s); // you can put more statements.\r}The syntax for a nested do…while loop statement in C++ is as follows\ndo {\rstatement(s); // you can put more statements.\rdo {\rstatement(s);\r} while( condition );\r} while( condition );Break The break statement has the following two usages in C++\nWhen the break statement is encountered inside a loop, the loop is immediately terminated and program control resumes at the next statement following the loop.\nIt can be used to terminate a case in the switch statement (covered in the next chapter).\nIf you are using nested loops (i.e., one loop inside another loop), the break statement will stop the execution of the innermost loop and start executing the next line of code after the block.\nbreak;Continue The continue statement works somewhat like the break statement. Instead of forcing termination, however, continue forces the next iteration of the loop to take place, skipping any code in between.\nFor the for loop, continue causes the conditional test and increment portions of the loop to execute. For the while and do…while loops, program control passes to the conditional tests.\ncontinue;Goto A goto statement provides an unconditional jump from the goto to a labeled statement in the same function.\nNOTE − Use of goto statement is highly discouraged because it makes difficult to trace the control flow of a program, making the program hard to understand and hard to modify. Any program that uses a goto can be rewritten so that it doesn’t need the goto.\ngoto label;\r..\r.\rlabel: statement;Where label is an identifier that identifies a labeled statement. A labeled statement is any statement that is preceded by an identifier followed by a colon (:).\nWorking with files In C++, files are mainly dealt by using three classes fstream, ifstream, ofstream available in fstream headerfile.\nofstream: Stream class to write on files ifstream: Stream class to read from files fstream: Stream class to both read and write from/to files. To perform file processing in C++, header files and must be included in your C++ source file. Opening a file A file must be opened before you can read from it or write to it. Either ofstream or fstream object may be used to open a file for writing. And ifstream object is used to open a file for reading purpose only. Following is the standard syntax for open() function, which is a member of fstream, ifstream, and ofstream objects.\nvoid open(const char *filename, ios::openmode mode); Sr.No Mode Flag \u0026 Description 1 ios::app Append mode. All output to that file to be appended to the end. 2 ios::ate Open a file for output and move the read/write control to the end of the file. 3 ios::in Open a file for reading. 4 ios::out Open a file for writing. 5 ios::trunc If the file already exists, its contents will be truncated before opening the file. We can combine two or more of these values by ORing them together. For example if you want to open a file in write mode and want to truncate it in case that already exists, following will be the syntax −\nofstream outfile;\routfile.open(\"file.dat\", ios::out | ios::trunc );Similar way, you can open a file for reading and writing purpose as follows −\nfstream afile;\rafile.open(\"file.dat\", ios::out | ios::in );Closing a File When a C++ program terminates it automatically flushes all the streams, release all the allocated memory and close all the opened files. But it is always a good practice that a programmer should close all the opened files before program termination. Following is the standard syntax for close() function, which is a member of fstream, ifstream, and ofstream objects.\nvoid close();Writing to a File While doing C++ programming, you write information to a file from your program using the stream insertion operator («) just as you use that operator to output information to the screen. The only difference is that you use an ofstream or fstream object instead of the cout object.\nReading from a File You read information from a file into your program using the stream extraction operator (») just as you use that operator to input information from the keyboard. The only difference is that you use an ifstream or fstream object instead of the cin object.\nMore on Files: Click here More on C++: Click here\n",
    "description": "",
    "tags": null,
    "title": "C++  Programming",
    "uri": "/programming/cpp/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "content": "\rClassroom Assistants - Spring 2024\rClassroom Assistants - Fall 2023\rClassroom Assistants - Spring 2023\rClassroom Assistants - Spring 2022\rClassroom Assistants - Spring 2021\rClassroom Assistants - Summer 2021\rClassroom Assistants - Fall 2021\r",
    "description": "",
    "tags": null,
    "title": "Classroom Assistants",
    "uri": "/classroom-assistants/index.html"
  },
  {
    "content": "Conda Installation Conda is an Open source package management system and envionment management system that runs on Windows,MacOS and Linux.\nConda makes it easy to manage multiple data environments that can be maintained and run separately without interference from each other.\nDownload Anaconda installer in your pc.\nWindows Installing on windows\nLinux Installing on Linux\nThe conda command is the primary interface for managing installation.\nWith the conda-install command, you can start using thousands of open-source Conda, R, Python and many other packages.\nCreating new conda envionment Getting Started Verify Conda is installed, check version number\tconda info\nUpdate all packages to the latest version of Anaconda. conda update anaconda\nUpdate Conda to the current version conda update -n base conda\nWorking with environments Create a new environment named ENVNAME with specific version of Python and packages installed. conda create --name ENVNAME python=3.6 \"PKG1\u003e7.6\" PKG2\nActivate a named Conda environment conda activate ENVNAME\nActivate a Conda environment at a particular location on disk\tconda activate /path/to/environment-dir\nDeactivate current environment conda deactivate\nList all packages and versions in the active environment\tconda list\nList all packages and versions in a named environment conda list --name ENVNAME\nList all revisions made within the active environment\tconda list --revisions\nList all revisions made in a specified environment conda list --name ENVNAME --revisions\nDelete an entire environment conda remove --name ENVNAME --allS\n",
    "description": "",
    "tags": null,
    "title": "Conda",
    "uri": "/tools/virtual_environments/conda/index.html"
  },
  {
    "content": "Have Git installed on local machine Set your Git user name for all repositories on your local machine git config –global user.name \"mihaelasabin\"\nConfirm that your Git user name has been set for all repositories on your local machine\ngit config –global user.name\nGitHub authentication If Git prompts you for a username and password every time you try to interact with GitHub (using push, fetch, or pull commands), it means that you have used HTTPS clone URL for the repository.\nWhen Git prompts you for your password, enter your personal access token (PAT) instead. Password-based authentication for Git is deprecated, and using a PAT is more secure. For more information, see \"Creating a personal access token.\"\nYou can avoid being prompted for your password caching your GitHub credentials in Git (see next guidelines below). Once you've configured credential caching, Git automatically uses your cached personal access token when you pull or push a repository using HTTPS.\nCaching your GitHub credentials in Git If you are cloning GitHub repositories using HTTPS, you can use a credential helper to tell Git to remember your GiHub credentials.\nSee https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git and choose the operating system of your machine: Mac, Windows, or Linux.\nWe consider below the example of Linux or Linux Subsystem in Window 10.\nSet git to use the memory cache with help from credential.helper. Otherwise, by default, Git caches the password for 15 minutes. $ git config –global credential.helper cache\nTo change the default password cache timeout to 1 hour: $ git config –global credential.helper 'cache –timeout=3600'\nCaching timeout to neve To change the default password cache timeout to never, the setting is operating system dependent.\nOn Mac OSX: git config --global credential.helper osxkeychain On Windows: First you must install git credential manager for Windows [microsoft/Git-Credential-Manager-for-Windows: Secure Git credential storage for Windows with support for Visual Studio Team Services, GitHub, and Bitbucket multi-factor authentication.] For git 2.7.3+ now run: git config --global credential.helper manager On any Linux gnome-keyring is needed: Fedora: sudo dnf install git-credential-libsecret git config --global credential.helper /usr/libexec/git-core/git-credential-libsecret Ubuntu: sudo apt-get install libsecret-1-0 libsecret-1-dev cd /usr/share/doc/git/contrib/credential/libsecret sudo make git config –global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret Creating a personal access token (PAT) You should create a personal access token to use in place of a password with the command line or with the GitHub API.\nSee https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token to learn how to create a PAT.\nOnce you have a token, you can enter the token instead of your password when performing Git operations over HTTPS. For example:\n$ git clone https://github.com/username/repo.git\nUsername: your_username\nPassword: your_token\nIf you are not prompted for your username and password, your credentials may be cached on your computer. You need to update your credentials in the Keychain to replace your old password with the token.\nInstead of manually entering your PAT for every HTTPS Git operation (push, fetch, pull, or clone), you can cache your PAT in Git. Git will temporarily store your credentials in memory until an expiry interval has passed. You can also store the token in a plain text file that Git can read before every request. For more information, see Caching your GitHub credentials in Git.\nEnabling 2FA on github.\nEnabling 2FA allows you to secure your github account via phone. In the coming months, password only authentication will be phased out, and every github user will be forced to use 2FA. Because of this it's better to get it set up, and to get used to the workflow changes it brings now.\nBy following the guide linked below, you can walk yourself through getting 2FA set up on github.\ndraft-resources/github2FA.md at main · unh-aes-resources/draft-resources\nReferences GitHub Documentation. Setting Your User Name.\nhttps://docs.github.com/en/get-started/getting-started-with-git/setting-your-username-in-git\nStack Overflow: Is there a way to cache https credentials\ngit - Is there a way to cache https credentials for pushing commits? - Stack Overflow\nGitHub Documentation. Caching Credentials. https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git\nGitHub Documentation. Creating a Personal Access Token.\nhttps://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\n",
    "description": "",
    "tags": null,
    "title": "GitHub Authentication",
    "uri": "/tools/git/git_authentication/index.html"
  },
  {
    "content": "To test your site locally, you’ll need\nRuby Bundler GitHub pages gem Understanding the virtual environment It is an isolated environment separate from other projects. Virtual Environments keep dependencies separated by project and because of that, they allow you to use different versions of Python or third-party libraries in each project you work on.\nWhat is Jekyll and why use Jekyll? GitHub Pages are public web pages for users, organizations, and repositories,that are freely hosted on GitHub’s github.io domain or on a custom domain name of your choice. GitHub Pages are powered by Jekyll behind the scenes,so they are a great way to host your Jekyll-powered website for free. Jekyll is a Ruby Gem, Jekyll is written in Ruby, it is a static site generator. For Example, you write your content in the text editor and it gets converted into a website using Jekyll. So, no prior CSS knowledge is required, just focus on the content.\nAdvantages of using Jekyll:\nSimplicity: You use Markdown its efficient and easy and beautiful. Speed: Pages are pre-rendered html pages, so no requests going back and forth for you, just html pages, which makes it very fast Secure: While only html pages make you site loads really fast, it’s also really secure, as there is no php code to look for error to or something that a hacker could use and there is even no database to hack in the first place! What is a Ruby Gem? A Ruby gem is a package of code, configured so that it complies with the Ruby style of software distribution. There are many Gems available, covering a large range of useful packages. Gems can be downloaded manually and added to the Gem file of your app, or you can use the Bundler tool to do that for you. For understanding, think of it as a plugin or code already made for you to use. Imagine you need to build a login form in your website, there is already some code existing in a file (gem), we must replace the content with the content we need. For this, we can create our own gems or use the ones already existing. You can find the list of gems in (https://rubygems.org/) website.\nRuby virtual environment A local, mutable, deployment directory for the execution environment that is independent of the global (system) environment. With Ruby, this is accomplished with the rbenv utility and these rbenv plugins: rbenv-gem-rehash, rbenv-gemset, ruby-build. RVM and rbenv? Both RVM and rbenv are Ruby version management tool. RVM is used to manage and install different versions of Ruby and gemsets on system where Rbenv is a lightweight Ruby version management tool. The best way to install and manage multiple side-by-side installations of Ruby is to use the Ruby virtual environment manager rbenv.\nActivating the Ruby virtual environment Switching an execution context to use the local deployment directory preferentially ahead of the global environment or masking the global environment. With Ruby virtual environments, this is accomplished using the rbenv local command to set a .ruby-version file in the project root folder, and a .ruby-gemsets file in the project root directing the location of gems to a .gems file, also in the project root.\nNote : Unlike python virtual environment activation this does not change the prompt to indicate the Ruby Virtual environment is active.\nVirtual environment deactivation mechanism For standing down a virtual environment i.e., for switching the execution context back to using the global environment and ignoring the deployment directory. This is accomplished using the rbenv local –unset command, which removes the. ruby-version file in the project root.\nNote : This doesn’t fully deactivate the virtual environment. If the working directory is within the project or application directory tree, then the .rbenv-gemsets file will still affect any gem install command.\nwhat is a Bundler? With rbenv-gemsets keeping gem installations within the project tree, there still needs to be a way to declare the gems required by the project and the gem versions required. Bundler uses a text file called Gemfile to control which gems, and which versions, get installed for a project—much in the same way that a requirements.txt file controls Python packages with pip in a Python virtual environment. Firstly, Bundler needs to be installed to use it. You can either install it in a project specific gemset, or you can install it into the Ruby installation directory. GitHub pages Setup on Ubuntu 1. Installing ruby Install ruby using rbenv and ruby-build according to their docs:\ncd $HOME\rsudo apt-get update\rsudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev\rgit clone https://github.com/rbenv/rbenv.git ~/.rbenv\recho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' \u003e\u003e ~/.bashrc\recho 'eval \"$(rbenv init -)\"' \u003e\u003e ~/.bashrc\rexec $SHELL\rgit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\recho 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' \u003e\u003e ~/.bashrc\rexec $SHELL\rrbenv install 2.3.1\rrbenv global 2.3.1\rruby -v2. Installing Bundler Run the following commands:\ngem install bundler\rrbenv rehash3. Installing the github-pages gem Run the following command:\ngem install github-pagesThis will install the github-pages gem and all dependencies (including jekyll).\n4. Testing your site locally To construct and test your site locally, go into the project directory and execute command:\nbundle exec jekyll serveInstall any missing gems using:\nbundle installThis will create (or modify) a _site/ directory, containing everything from assets/, and then the index.md and all pages/*.md files, converted to html. (So there’ll be _site/index.html and the various _site/pages/*.html.)\nNow open your browser and go to http://localhost:4000\nGithub Pages windows setup: Installing Ruby (With Devkit) Start by downloading the latest version of ruby installer with devkit from here\nRun the installer, and select “MSYS2” in the installation options.\n- This will open a command window on completion, install option 3.\r(MSYS2 and MINGW development toolchain.)\rInstall the necessary rubygems Navigate to the GitHub Pages repository from your windows command line,\nuse the command gem install bundler Install the github pages gem\ngem install github-pages\nTesting your site locally To construct and test your site locally, go into the project directory and execute command:\nbundle exec jekyll serveInstall any missing gems using:\nbundle installThis will create (or modify) a _site/ directory, containing everything from assets/, and then the index.md and all pages/*.md files, converted to html. (So there’ll be _site/index.html and the various _site/pages/*.html.)\nNow open your browser and go to http://localhost:4000\n",
    "description": "",
    "tags": null,
    "title": "GitHub Pages",
    "uri": "/github-pages-setup/index.html"
  },
  {
    "content": "Code Structure in Java: The source code file holds one class definition. The class represents a piece of the program. A class has one or more methods. A method is a set of statements that states how a method should be performed. How Java works: Type a source code file(example.java). Compile source code file to create a bytecode. The compiler gives complied output file(exampe.class) Java virtual machine runs an example.class file. Every Java application must have at least one class and only one main method per application. A JVM starts executing its main() method and keeps running until the main method is finished. Some Syntax: Each statement must end with a semicolon. Most white spaces don’t matter. The variable must be declared with type and name. Classes and methods must be defined between a pair of curly braces. Java has three standard looping constructs - while, do-while and for a loop. A conditional test is an expression that results in a boolean value. public class MyClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }Variables Variables are containers for storing data values. In Java, there are different types of variables, for example:\nString - stores text, such as “Hello”. String values are surrounded by double quotes int - stores integers (whole numbers), without decimals, such as 123 or -123 float - stores floating-point numbers, with decimals, such as 19.99 or -19.99 char - stores single characters, such as ‘a’ or ‘B’. Char values are surrounded by single quotes boolean - stores values with two states: true or false Data Types Data types are divided into two groups:\nPrimitive data types - includes byte, short, int, long, float, double, boolean and char Non-primitive data types - such as String, Arrays, and Classes. Conditions and If Statements Java supports the usual logical conditions from mathematics:\nLess than: a \u003c b Less than or equal to: a \u003c= b Greater than: a \u003e b Greater than or equal to: a \u003e= b Equal to a == b Not Equal to: a != b Java has the following conditional statements:\nUse if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed if the same condition is false Use else if to specify a new condition to test, if the first condition is false Use the switch to specify many alternative blocks of code to be executed if (condition) { // block of code to be executed if the condition is true }While Loop The while loop loops through a block of code as long as a specified condition is true:\nwhile (condition) { // code block to be executed }Do/While Loop The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\ndo { // code block to be executed } while (condition);For Loop The for statement provides a compact way to iterate over a range of values. It repeatedly loops until a particular condition is satisfied.\nfor (statement 1; statement 2; statement 3) { // code block to be executed }Arrays Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value. To declare an array, define the variable type with square brackets:\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};Access the Elements of an Array We can access an array element by referring to the index number.\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars[0]); // Outputs VolvoMore on Java: Click here\n",
    "description": "",
    "tags": null,
    "title": "Java Programming",
    "uri": "/programming/java/java/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Javascript",
    "uri": "/programming/java-script/java-script/index.html"
  },
  {
    "content": "Installation of Python linter on Atom editor (Ubuntu) Linter analyzes the code and checks for the syntax errors. Follow the below steps to have python linter set up in Atom editor on ubuntu os:\nOpen Atom editor and go to ‘Settings’\nGo to “Install”\nSearch for ‘linter’ and install the latest version.\nSearch for ‘linter-pycodestyle’ and install.\nSearch for ‘linter-ui-default’ and install. A pop-up will show up asking to install all the required dependencies, install these dependencies by clicking “OK” on the pop-up options.\nOnce, these packages are installed, check in the ‘Packages’ section and make sure that all the three packages are enabled. Now, the linter is active and it shows all the styling errors in your python code.\n",
    "description": "",
    "tags": null,
    "title": "Linter for Python",
    "uri": "/tools/python_linter/python_linter/index.html"
  },
  {
    "content": "\rStudent's guide to loan an equipment\rLoaned equipment return policy\r",
    "description": "",
    "tags": null,
    "title": "Loan Services",
    "uri": "/loan-services/index.html"
  },
  {
    "content": "\rDual Booting\rAlternate Installation of UBUNTU 20.1 in Gen 1 laptops\rDual Boot System Configuration\rUbuntu\rCreating partition on ubuntu during installation\rUbuntu Installation Guide\rWindows\rCreate partition in windows\rWindows Linux Subsystem\r",
    "description": "",
    "tags": null,
    "title": "Operating Systems",
    "uri": "/operating-systems/index.html"
  },
  {
    "content": "About Perl is the Swiss Army chainsaw of scripting languages: powerful and adaptable. It was first developed by Larry Wall, a linguist working as a systems administrator for NASA in the late 1980s, as a way to make report processing easier. Since then, it has moved into a large number of roles: automating system administration, acting as glue between different computer systems; and, of course, being one of the most popular languages for CGI programming on the Web.\nPerl Installation into your machine Perl - Click here to download\nChoose Operating System and Download the required version.\nData Types Perl has three data types: scalars, arrays and hashes\nScalars are single things. This might be a number or a string. The name of a scalar begins with $.\n$a = 5Arrays are lists of scalars organized by position. Array names begin with@. You define arrays by listing their contents in parentheses, separated by commas.\n@b = (1,2,3)To access an element of an array, you replace the @ sign with a $ sign and use the indexing operator [ ] with the position of the element you want. (It begins with a dollar sign because you’re getting a scalar value.) You can also modify it in place, just like any other scalar.\n$z = @b[0]Hashes are called “dictionaries” in some programming languages, and that’s what they are: a term and a definition, or in more correct language a key and a value. Each key in a hash has one and only one corresponding value. The name of a hash begins with a percentage sign, like %parents. You define hashes by comma-separated pairs of key and value. You can fetch any value from a hash by referring to $hashname{key}, or modify it in place just like any other scalar.\nprint \"Hello Wolrd\\n\"; $a = 5; # define and initialize scalar a print $a . \"\\n\";\t@b = (1,2,3);\t# define and initialize array b print $b[0] . \"\\n\";\t# access array value at position 0 with indexing operator [] %c = (\" Mike\" =\u003e \"Jonas\", \"Miheala\" =\u003e \"Sabin\");\t# define and initialize hash c print $c{\"Mike\"} . \"\\n\";\t# access hash value by key \"Mike\" with operator {} $d{\"Wolf\"} = \"Blitzer\";\t# define new hash d with value \"Blitzer\" at key \"Wolf\" print $d{\"Wolf\"} . \"\\n\";\t$last = \"Jonas\";\tif ( \"$last\" == $c{\"Mike\"})\t#comparing operator '==' { print \"They match!\\n\"; } else { print \"They dont!\\n\"; } print \"Please enter your name?\"; $name = \u003cSTDIN\u003e;\t# Getting Input from User and saving in a scalar $name print $name . \"\\n\";\topen (FILE, \"perl_basics\") or die \"Couldn't find file\"; #opening file while (\u003cFILE\u003e) { print \"$_\";\t#printing values to terminal }The difference between single quotes and double quotes is that single quotes mean that their contents should be taken literally, while double quotes mean that their contents should be interpreted. For example, the character sequence \\n is a newline character when it appears in a string with double quotes, but is literally the two characters, backslash and n, when it appears in single quotes.\n",
    "description": "",
    "tags": null,
    "title": "Perl Programming",
    "uri": "/programming/perl/perl/index.html"
  },
  {
    "content": "Overview Pipenv is a packaging tool for Python that solves some common problems associated with the typical workflow using pip, virtualenv, and the good old requirements.txt.\nIn addition to addressing some common issues, it consolidates and simplifies the development process to a single command line tool.\nProblems that Pipenv solves Let’s say we’ve got a requirements.txt file that looks something like this:\nPython Requirements\rpackage_a\rpackage_bLet’s say package_a has a sub-dependency package_c, and package_a requires a specific version of this package: package_c\u003e=1.0. In turn, package_b has the same sub-dependency but needs package_c\u003c=2.0.\nIdeally, when we try to install package_a and package_b, the installation tool would look at the requirements for package_c (being \u003e=1.0 and \u003c=2.0) and select a version that fulfills those requirements. we would hope that the tool resolves the dependencies so that our program works in the end.\nUnfortunately, pip itself doesn’t have real dependency resolution at the moment, but there’s an open issue to support it.\nThe way pip would handle the above scenario is as follows:\nIt installs package_a and looks for a version of package_c that fulfills the first requirement (package_c\u003e=1.0).\nPip then installs the latest version of package_c to fulfill that requirement. Let’s say the latest version of package_c is 3.1. And This is where the trouble starts. If the version of package_c selected by pip doesn’t fit future requirements (such as package_b needing package_c\u003c=2.0), the installation will fail.\nThe “solution” to this problem is to specify the range required for the sub-dependency (package_c) in the requirements.txt file. That way, pip can resolve this conflict and install a package that meets those requirements:\nPython Requirements\rpackage_c\u003e=1.0,\u003c=2.0\rpackage_a\rpackage_bThe issue with this is that if package_a changes their requirement without you knowing, the requirements you specified (package_c\u003e=1.0,\u003c=2.0) may no longer be acceptable, and installation may fail… again. The real problem is that once again, we’re responsible for staying up to date with requirements of sub-dependencies.\nIdeally, installation tool would be smart enough to install packages that meet all the requirements without explicitly specifying sub-dependency versions.\nPipenv Installation Installation using pip\npip install pipenvIf you’re on MacOS, you can install Pipenv easily with Homebrew. You can also use Linuxbrew on Linux using the command:\nbrew install pipenvOr, if you’re using Fedora 28:\nsudo dnf install pipenvTo upgrade pipenv at any time:\npip install --user --upgrade pipenvCrude Installation of Pipenv\nIf you don’t even have pip installed, you can use this crude installation method, which will bootstrap your whole system:\n$ curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | pythonwe can create a new pipenv project in our project directory with\npipenv --python $PYTHON_VERSIONwhich will initialize the project using the specified Python version (if pyenv is installed, it can even install Python versions on-demand). To start with, this creates:\na Pipfile config file at the project home specifying Python version, sources, and any installed packages a fresh virtual environment housed in the pipenv working directory We no longer have to manage installs with pip and virtual environments separately - pipenv takes care of both! To install a package, simply running\npipenv install PACKAGE_NAMEwill both install the package into the virtual environment, and write the package as a dependency into the Pipfile. This Pipfile is then all we need to rebuild the project elsewhere, rather than the requirements.txt used by other managers - simply running pipenv install on a directory with a Pipfile will recreate the environment. To activate the environment,\npipenv shellwill launch a new shell process using the project’s virtual environment. Next, pipenv can do something fairly unique - it fully determines and specifies dependencies for the project. At the minimum, pip install just needs a package name to install, e.g. pip install numpy. We can, of course, specify version limits, e.g. numpy==1.18.1, in pip install or requirements files. However, beyond this, pip doesn’t really do much validation - while pulling required dependencies of the packages we want to install, pip can potentially end up pulling clashing versions, so unless we’ve actually checked that everything installs (like by actually installing everything and then generating the requirements file directly from pip freeze) we can run into issues trying to rebuild the environment from the package requirements. Instead, pipenv exhaustively builds out the dependency graph, flagging any issues and generating a validated Pipfile.lock for fully specifying every dependency in the project. We can trigger this manually for the requirements in our Pipfile with\npipenv lockto pull the specifically requested packages from the Pipfile and generate the dependency graph for Pipfile.lock. While this does produce environments that can be deterministically reproduced, the dependency resolution can be quite complex, so pipenv environments are slower to write than using bare pip.\nPros: officially supported by Python Packaging Authority single tool for project, virtual environment, and package management plays well with pyenv and conda for Python \u0026 environment types validated, deterministic dependencies for every project Cons: incompatible with other management tools, so requires consistent use across projects and users dependency resolution is quite slow ",
    "description": "",
    "tags": null,
    "title": "Pipenv",
    "uri": "/tools/virtual_environments/pipenv/index.html"
  },
  {
    "content": "This page consists of brief explanation on how the same program is implemented in different programming languages: Perl, Python, Java, JavaScript, C++.\nThe example program taken for this purpose describes how to:\ndeclare and initialize datatypes simple datatypes like numbers structured datatypes like string, hash or dictionary access elements in each of the different datatypes(indexing) use simple statements, such as assignment, function call, print statements, relational operators. use conditional statements, such as if..else use compound statements, such as loops. get user input. opening and accessing a file. ",
    "description": "",
    "tags": null,
    "title": "Programming",
    "uri": "/programming/index.html"
  },
  {
    "content": "About Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python’s design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\nPython is dynamically typed and garbage-collected. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is often described as a “batteries included” language due to its comprehensive standard library.\nPython was conceived in the late 1980s as a successor to the ABC language. Python 2.0, released in 2000, introduced features like list comprehensions and a garbage collection system capable of collecting reference cycles. Python 3.0, released in 2008, was a major revision of the language that is not completely backward-compatible, and much Python 2 code does not run unmodified on Python 3.\nData Types There are several data types in Python. The main data types that we use most are string, integer, float, list, dict and tuple.\nString Strings are usually created in one of three ways. We can use single, double or triple quotes.\nmy_string = \"Welcome to Python!\" another_string = 'The bright red fox jumped the fence.' a_long_string = '''This is a multi-line string. It covers more than one line'''There’s actually one other way to create a string and that is by using the str method. Here’s how it works:\nmy_number = 123 my_string = str(my_number)If you type the code above into your interpreter, you’ll find that you have transformed the integer value into a string and assigned the string to the variable my_string. This is known as casting. You can cast some data types into other data types, like numbers into strings. But you’ll also find that you can’t always do the reverse, such as casting a string like ‘ABC’ into an integer. If you do that, you’ll end up with an error like the one in the following example:\nint('ABC') Traceback (most recent call last): File \"\u003cstring\u003e\", line 1, in \u003cfragment\u003e ValueError: invalid literal for int() with base 10: 'ABC'Concatenation is a big word that means to combine or add two things together. In this case, we want to know how to add two strings together. As you might suspect, this operation is very easy in Python:\nstring_one = \"My dog ate \" string_two = \"my homework!\" string_three = string_one + string_twoString Slicing\nLet’s take a look at how slicing works with the following string:\nmy_string = \"I like Python!\"Each character in a string can be accessed using slicing. For example, if I want to grab just the first character, I could do this:\nmy_string[0:1]This grabs the first character in the string up to, but not including, the 2nd character. Yes, Python is zero-based. It’s a little easier to understand if we map out each character’s position in a table:\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 I l i k e P y t h o n !Thus we have a string that is 14 characters long, starting at zero and going through thirteen. Let’s do a few more examples to get these concepts into our heads better.\nmy_string[:1] 'I' my_string[0:12] 'I like Pytho' my_string[0:13] 'I like Python' my_string[0:14] 'I like Python!' my_string[0:-5] 'I like Py' my_string[:] 'I like Python!' my_string[2:] 'like Python!'As we can see from these examples, we can do a slice by just specifying the beginning of the slice (i.e. my_string[2:]), the ending of the slice (i.e. my_string[:1]) or both (i.e. my_string[0:13]). We can even use negative values that start at the end of the string. So the example where we did my_string[0:-5] starts at zero, but ends 5 characters before the end of the string.\nMore on Strings : Click here\nLists A Python list is similar to an array in other languages. In Python, an empty list can be created in the following ways.\nmy_list = [] my_list = list()As we can see, we can create the list using square brackets or by using the Python built-in, list. A list contains a list of elements, such as strings, integers, objects or a mixture of types. Let’s take a look at some examples:\nmy_list = [1, 2, 3] my_list2 = [\"a\", \"b\", \"c\"] my_list3 = [\"a\", 1, \"Python\", 5]The first list has 3 integers, the second has 3 strings and the third has a mixture. You can also create lists of lists like this:\nmy_nested_list = [my_list, my_list2] my_nested_list [[1, 2, 3], ['a', 'b', 'c']]We can also sort a list. Let’s spend a moment to see how to do that:\nalpha_list = [34, 23, 67, 100, 88, 2] alpha_list.sort() alpha_list [2, 23, 34, 67, 88, 100]Let’s do one more example:\nalpha_list = [34, 23, 67, 100, 88, 2] sorted_list = alpha_list.sort() sorted_list print(sorted_list) NoneIn this example, we try to assign the sorted list to a variable. However, when we call the sort() method on a list, it sorts the list in-place. So if we try to assign the result to another variable, then we’ll find out that we’ll get a None object, which is like a Null in other languages. Thus when we want to sort something, just remember that we sort them in-place and we cannot assign it to a different variable.\nWe can slice a list just like you do with a string:\nalpha_list[0:3] [2, 23, 34]This code returns a list of just the first 3 elements.\nTuples A tuple is similar to a list, but we create them with parentheses instead of square brackets. We can also use the tuple built-in. The main difference is that a tuple is immutable while the list is mutable. Let’s take a look at a few examples:\nmy_tuple = (1, 2, 3, 4, 5) my_tuple[0:3] (1, 2, 3) another_tuple = tuple() abc = tuple([1, 2, 3])The code above demonstrates one way to create a tuple with five elements. It also shows that we can do tuple slicing. However, we cannot sort a tuple! The last two examples shows how to create tuples using the tuple keyword. The first one just creates an empty tuple whereas the second example has three elements inside it. Notice that it has a list inside it. This is an example of casting. We can change or cast an item from one data type to another. In this case, we cast a list into a tuple. If we want to turn the abc tuple back into a list, we can do the following:\nabc_list = list(abc)To reiterate, the code above casts the tuple (abc) into a list using the list function.\nDictionaries A Python dictionary is basically a hash table or a hash mapping. In some languages, they might be referred to as associative memories or associative arrays. They are indexed with keys, which can be any immutable type. For example, a string or number can be a key. We need to be aware that a dictionary is an unordered set of key:value pairs and the keys must be unique. We can get a list of keys by calling a dictionary instance’s keys method. To check if a dictionary has a key, you can use Python’s “in” keyword. In some of the older versions of Python (2.3 and older to be specific), you will see the has_key keyword used for testing if a key is in a dictionary. This keyword is deprecated in Python 2.x and removed entirely from Python 3.x.\nLet’s take a moment to see how we create a dictionary.\nmy_dict = {} another_dict = dict() my_other_dict = {\"one\":1, \"two\":2, \"three\":3} my_other_dict {'three': 3, 'two': 2, 'one': 1}The first two examples show how to create an empty dictionary. All dictionaries are enclosed with curly braces. The last line is printed out so we can see how unordered a dictionary is. Now it’s time to find out how to access a value in a dictionary.\nmy_other_dict[\"one\"] 1 my_dict = {\"name\":\"Mike\", \"address\":\"123 Happy Way\"} my_dict[\"name\"] 'Mike'In the first example, we use the dictionary from the previous example and pull out the value associated with the key called “one”. The second example shows how to acquire the value for the “name” key. Now let’s see how to tell if a key is in a dictionary or not:\n\"name\" in my_dict True \"state\" in my_dict FalseSo, if the key is in the dictionary, Python returns a Boolean True. Otherwise it returns a Boolean False. If we need to get a listing of all the keys in a dictionary, then we do this:\nmy_dict.keys() dict_keys(['name', 'address'])In Python 2, the keys method returns a list. But in Python 3, it returns a view object. This gives the developer the ability to update the dictionary and the view will automatically update too. Also note that when using the in keyword for dictionary membership testing, it is better to do it against the dictionary instead of the list returned from the keys method. See below:\n\"name\" in my_dict # this is good \"name\" in my_dict.keys() # this works too, but is slower",
    "description": "",
    "tags": null,
    "title": "Python Programming",
    "uri": "/programming/python/python/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  },
  {
    "content": "\rGitHub Authentication\rLinter for Python\rVirtual environments in Python\rConda\rPipenv\r",
    "description": "",
    "tags": null,
    "title": "Tools",
    "uri": "/tools/index.html"
  },
  {
    "content": "\rAcademic Honesty in Computing\rClassroom Assistants\rClassroom Assistants - Spring 2024\rClassroom Assistants - Fall 2023\rClassroom Assistants - Spring 2023\rClassroom Assistants - Spring 2022\rClassroom Assistants - Spring 2021\rClassroom Assistants - Summer 2021\rClassroom Assistants - Fall 2021\rGitHub Pages\rLoan Services\rStudent's guide to loan an equipment\rLoaned equipment return policy\rOperating Systems\rDual Booting\rAlternate Installation of UBUNTU 20.1 in Gen 1 laptops\rDual Boot System Configuration\rUbuntu\rCreating partition on ubuntu during installation\rUbuntu Installation Guide\rWindows\rCreate partition in windows\rWindows Linux Subsystem\rProgramming\rC++ Programming\rJava Programming\rJavascript\rPerl Programming\rPython Programming\rTools\rGitHub Authentication\rLinter for Python\rVirtual environments in Python\rConda\rPipenv\rUNH Secure Network\r",
    "description": "",
    "tags": null,
    "title": "UNH COMPUTING RESOURCES",
    "uri": "/index.html"
  },
  {
    "content": "Connecting to Eduroam Connecting to eduroam in Ubuntu Connect to Eduroam wireless network. It opens a browser with URL cloudpath. Login as a student with your personal UNH ID and password. Follow the onscreen instructions. A zip file will be downloaded. Now, extract the zip file to a location such as the documents or downloads folder and run the cloudpath executable. Once exe has finished configuring the wifi, you will be able to connect to Eduroam. If the zip file is not downloaded open a terminal and type sudo apt-get install ubuntu-restricted-extras Enter your password and all third-party programs that you need to be installed. With this packages you will get also some extras like Microsoft fonts. UNH-Secure Network Connection Guide Follow the below mentioned steps to get a successful network connection to UNH-Secure network:\nConnect to the UNH Public wireless network. Open a web browser and go to http://wifi.unh.edu Login as a student with your personal UNH ID and password. Follow the onscreen instructions. A zip file will be downloaded. Now, extract the zip file to a location such as the documents or downloads folder and run the cloudpath executable. Once exe has finished configuring the wifi, you will be able to connect to UNH Secure. ",
    "description": "",
    "tags": null,
    "title": "UNH Secure Network",
    "uri": "/unh-secure-connection/index.html"
  },
  {
    "content": "Need for virtual environments Python, like most other modern programming languages, has its own unique way of downloading, storing, and resolving packages (or modules). While this has its advantages, there were some interesting decisions made about package storage and resolution, which has lead to some problems particularly with how and where packages are stored.\nIt’s important to know this because, by default, every project on your system will use these same directories to store and retrieve site packages (third party libraries). At first glance, this may not seem like a big deal, and it isn’t really, for system packages (packages that are part of the standard Python library), but it does matter for site packages.\nConsider the following scenario where you have two projects: ProjectA and ProjectB, both of which have a dependency on the same library, ProjectC. The problem becomes apparent when we start requiring different versions of ProjectC. Maybe ProjectA needs v1.0.0, while ProjectB requires the newer v2.0.0, for example.\nThis is a real problem for Python since it can’t differentiate between versions in the site-packages directory. Since projects are stored according to just their name, there is no differentiation between versions. Thus, both projects, ProjectA and ProjectB, would be required to use the same version, which is unacceptable in many cases.\nThis is where virtual environments come into play…\nWhat is a virtual environment in Python? At its core, the main purpose of Python virtual environments is to create an isolated environment for Python projects. This means that each project can have its own dependencies, regardless of what dependencies every other project has.\nIn our little example above, we’d just need to create a separate virtual environment for both ProjectA and ProjectB, and we’d be good to go. Each environment, in turn, would be able to depend on whatever version of ProjectC they choose, independent of the other.\nThe great thing about this is that there are no limits to the number of environments you can have since they’re just directories containing a few scripts. Plus, they’re easily created using the pipenv or conda tools.\n",
    "description": "",
    "tags": null,
    "title": "Virtual environments in Python",
    "uri": "/tools/virtual_environments/index.html"
  }
]
